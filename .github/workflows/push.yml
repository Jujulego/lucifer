name: Push

on:
  push:
    branches: [master]

env:
  NX_BRANCH: ${{ github.event.number }}
  NX_RUN_GROUP: ${{ github.run_id }}

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 14.x
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x

      - name: Setup Cache
        id: setup-cache
        run: echo "::set-output name=yarn-cache::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.setup-cache.outputs.yarn-cache }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --pure-lockfile

      - name: Lint
        run: yarn run nx run-many --all --target=lint --scan

  tests:
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: 'root'
          POSTGRES_PASSWORD: 'root'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      AUTH0_DOMAIN: 'test.com'
      AUTH0_AUDIENCE: 'test'
      AUTH0_CLIENT_ID: 'test'
      AUTH0_CLIENT_SECRET: 'test'

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 14.x
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x

      - name: Setup Cache
        id: setup-cache
        run: echo "::set-output name=yarn-cache::$(yarn cache dir)"

      - name: Setup Database
        uses: ./.github/actions/setup-db
        with:
          db-host: 'localhost'
          db-port: 5432
          db-username: 'root'
          db-password: 'root'

      - uses: actions/cache@v2
        with:
          path: ${{ steps.setup-cache.outputs.yarn-cache }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn install --pure-lockfile
          yarn run build:tools

      - name: Migrate
        run: yarn run nx run-many --all --target=db-migrate --scan

      - name: Tests
        run: yarn run nx run-many --all --target=test --scan --codeCoverage --coverageReporters=clover,lcovonly,json

      - name: Codecov
        uses: codecov/codecov-action@v1.2.1
        with:
          directory: coverage

  build:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 14.x
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x

      - name: Setup Cache
        id: setup-cache
        run: echo "::set-output name=yarn-cache::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.setup-cache.outputs.yarn-cache }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn install --pure-lockfile
          yarn run build:tools

      - name: Build
        run: yarn run nx run-many --all --target=build --scan --prod

      - name: Archive build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: dist

      - name: Archive rules artifacts
        uses: actions/upload-artifact@v2
        with:
          name: rules
          path: res/rules

  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build
          path: dist

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=ghcr.io/${{ github.repository }}/lucifer-api
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE,,}:${VERSION}"
          if [ "${{ github.event_name }}" = "push" ]; then
            TAGS="$TAGS,${DOCKER_IMAGE,,}:sha-${GITHUB_SHA::8}"
          fi
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1

      - name: Setup Docker
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          push: true
          file: apps/lucifer-api/Dockerfile
          context: .
          build-args: |
            "Auth0Domain=dev-lucifer.eu.auth0.com"
            "Auth0Audience=https://lucifer-api.herokuapp.com/"
            "Auth0ClientId=ktmzvUo29TuSbQ8p1AvLrZMPTYCPsH3Z"
            "Auth0ClientSecret=${{ secrets.AUTH0_CLIENT_SECRET }}"
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
          tags:  ${{ steps.prep.outputs.tags }}

  terraform:
    runs-on: ubuntu-latest
    needs: [build, tests]

    steps:
      - uses: actions/checkout@v2

      - name: Download rules artifacts
        uses: actions/download-artifact@v2
        with:
          name: rules
          path: res/rules

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        run: terraform fmt -check res

      - name: Terraform Init
        run: terraform init res

      - name: Terraform Apply
        run: terraform apply -auto-approve res

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [docker, terraform]

    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: 'root'
          POSTGRES_PASSWORD: 'root'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      lucifer-api:
        image: ghcr.io/jujulego/lucifer/lucifer-api:master
        credentials:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
        env:
          DATABASE_URL: 'postgres://root:root@postgres:5432'
        ports:
          - 3333:80

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 14.x
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x

      - name: Setup Cache
        id: setup-cache
        run: echo "::set-output name=yarn-cache::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.setup-cache.outputs.yarn-cache }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn install --pure-lockfile
          yarn run build:tools

      - name: Migrate
        run: yarn run nx run-many --all --target=db-migrate --scan

      - name: E2E Tests
        run: |
          echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p
          yarn run nx run-many --all --target=e2e --scan
        env:
          CYPRESS_Auth0ClientSecret: ${{ secrets.E2E_AUTH0_CLIENT_SECRET }}

      - name: Codecov
        uses: codecov/codecov-action@v1.2.1
        with:
          flags: e2e

      - name: Archive cypress results
        uses: actions/upload-artifact@v2
        with:
          name: cypress-results
          path: dist/cypress

  deploy:
    runs-on: ubuntu-latest
    needs: e2e-tests

    steps:
      - uses: actions/checkout@v2

      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build
          path: dist

      - name: Use Node.js 14.x
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x

      - name: Setup Cache
        id: setup-cache
        run: echo "::set-output name=yarn-cache::$(yarn cache dir)"

      - name: Setup Git
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com

      - uses: actions/cache@v2
        with:
          path: ${{ steps.setup-cache.outputs.yarn-cache }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn install --pure-lockfile
          yarn run build:tools

      - name: Deploy
        run: yarn run nx run-many --all --target=deploy --repository=$REPOSITORY_URL
        env:
          REPOSITORY_URL: "https://${{ github.actor }}:${{ github.token }}@github.com/${{ github.repository }}.git"

  deploy-docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 14.x
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.x

      - name: Setup Cache
        id: setup-cache
        run: echo "::set-output name=yarn-cache::$(yarn cache dir)"

      - uses: actions/cache@v2
        with:
          path: ${{ steps.setup-cache.outputs.yarn-cache }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --pure-lockfile

      - name: Build storybook
        run: yarn nx run storybook:build-storybook

      - name: Deploy docs
        uses: JamesIves/github-pages-deploy-action@3.7.1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: docs # The branch the action should deploy to.
          FOLDER: dist/storybook/storybook # The folder the action should deploy.
          CLEAN: true # Automatically remove deleted files from the deploy branch
