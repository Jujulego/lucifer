name: Terraform Plan

on:
  pull_request:
    branches: [ master ]
    paths:
      - 'res/**'
      - 'apps/lucifer-auth0/**'

env:
  NX_BRANCH: ${{ github.event.number }}
  NX_RUN_GROUP: ${{ github.run_id }}

jobs:
  auth0:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Use Node.js 14.x
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 14.x

      - name: Setup Cache
        id: setup-cache
        run: echo "::set-output name=yarn-cache::$(yarn cache dir)"

      - uses: actions/cache@v2.1.4
        with:
          path: |
            ${{ steps.setup-cache.outputs.yarn-cache }}
            ~/.cache/Cypress
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          yarn run build:tools

      - name: Build
        run: yarn run nx run lucifer-auth0:build

      - name: Archive rules artifacts
        uses: actions/upload-artifact@v2
        with:
          name: rules
          path: res/rules

  terraform:
    runs-on: ubuntu-latest
    needs: auth0

    steps:
      - uses: actions/checkout@v2

      - name: Download rules artifacts
        uses: actions/download-artifact@v2
        with:
          name: rules
          path: res/rules

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ./res
        continue-on-error: true

      - name: Terraform Init
        id: init
        if: steps.fmt.outcome == 'success'
        run: terraform init
        working-directory: ./res
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        if: steps.init.outcome == 'success'
        run: terraform plan -no-color
        working-directory: ./res
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v3
        env:
          PLAN_OUTPUT: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            | Steps                         | Status                     |
            | ----------------------------- | -------------------------- |
            | üñå Terraform Format and Style | \`${{ steps.fmt.outcome }}\` |
            | ‚öôÔ∏è Terraform Initialization   | \`${{ steps.init.outcome }}\` |
            | üìñ Terraform Plan             | \`${{ steps.plan.outcome }}\` |

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN_OUTPUT}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Status
        if: steps.plan.outcome != 'success'
        run: exit 1
