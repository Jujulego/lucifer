name: Pull Requests

on:
  pull_request:
    branches: [ master ]

env:
  NX_BRANCH: ${{ github.event.number }}
  NX_RUN_GROUP: ${{ github.run_id }}

jobs:
  tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: 'root'
          POSTGRES_PASSWORD: 'root'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      AUTH0_DOMAIN: 'test.com'
      AUTH0_AUDIENCE: 'test'
      AUTH0_CLIENT_ID: 'test'
      AUTH0_CLIENT_SECRET: 'test'

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - name: Use Node.js 14.x
        uses: actions/setup-node@v1
        with:
          node-version: 14.x

      - name: 'Setup Cache'
        id: setup-cache
        run: echo "::set-output name=yarn-cache::$(yarn cache dir)"

      - name: 'Setup Database'
        uses: ./.github/actions/setup-db
        with:
          db-host: 'localhost'
          db-port: 5432
          db-username: 'root'
          db-password: 'root'

      - name: 'Setup Nx'
        id: setup
        run: git fetch --no-tags --prune --depth=5 origin ${{ github.base_ref }}

      - uses: actions/cache@v2
        with:
          path: ${{ steps.setup-cache.outputs.yarn-cache }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: |
          yarn install --pure-lockfile
          yarn run build:tools

      - name: Lint
        run: yarn run affected:lint --scan --base=origin/${{ github.base_ref }}

      - name: Migrate
        run: yarn run nx run-many --all --target=db-migrate --scan

      - name: Tests
        run: yarn run affected:test --scan --base=origin/${{ github.base_ref }}

  terraform:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check res

      - name: Terraform Init
        id: init
        run: terraform init res

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color res
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v3
        env:
          PLAN_OUTPUT: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output =
              "#### Terraform Format and Style üñå`${{ steps.fmt.outcome }}`\n" +
              "#### Terraform Initialization ‚öôÔ∏è`${{ steps.init.outcome }}`\n" +
              "#### Terraform Plan üìñ`${{ steps.plan.outcome }}`\n" +
              "<details>\n" +
              "  <summary>Show Plan</summary>\n" +
              "  ```\n" +
              `    ${process.env.PLAN_OUTPUT}\n` +
              "  ```\n" +
              "</details>\n" +
              "*Pusher: @${{ github.actor }}, Action: `${{ github.event_name }}`*";

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
